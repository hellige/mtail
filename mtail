#!/usr/bin/python

# file tailer/colorer.
#
# by matt hellige (matt@immute.net)

# http://matt.immute.net/src/mtail
#
# this utility is derived in part from colortail-0.3.0 by joakim andersson 
# (pt98jan@student.hk-r.se). it is an improvement on that work in several
# areas:
#   - it is roughly 500 lines of code, rather than roughly 3500.
#   - it does not dump core when it encounters long lines.
#   - the regexp matching process is simpler and, in my opinion, more intuitive.
#   - there is only one config file, which contains coloring rules for an 
#     arbitrary number of files.
#   - my coloring algorithm only generates escape codes when the color actually
#     needs changing, rather than around every single character.
#   - by virtue of being written in python, it is less platform-dependent.
#   - i support pre-coloring filters.
# please see the file LICENSE for copyright info, etc... share and enjoy!

import getopt
import string
import time
import re
import sys
import stat
import os
import threading
try:
    import signal
except:
    signal = None

# config file location. this should be made platform-independent...
if os.environ.has_key('HOME'):
    config_file = os.environ['HOME']+os.sep+'.mtailrc'
else:
    config_file = None
# version number
version_number = "1.2.0"

# stuff to make sure that we print banners correctly when tailing multiple
# files. we need to lock around the printing of each line to guarantee that
# each line gets a banner when necessary.
lock = threading.Lock()
event = threading.Event()
last_filename = None
multiple = 0
verbose = 0
silent = 0
active = 0
tty_only = 0

# sets up the interrupt handler, calls processargs(), sets up and starts the
# tailers.
def main():
    global multiple
    global active
    if signal:
        signal.signal(signal.SIGINT, handleInterrupt)
    initial_lines, filenames, follow = processargs()
    config = ConfigFile(config_file)
    config.loadconfig()
    if len(filenames) > 1:
        multiple = 1
    for filename in filenames:
        lock.acquire()
        active = active + 1
        TailerThread(initial_lines, filename, follow, config).start()
        lock.release()
    while 1:
        # it seems that there just needs to be some number here, or it ignores
        # signals. PYTHON BUG!
        event.wait(10000)
        if event.isSet():
            sys.exit(0)

# signal handler for keyboard interrupts... just exits.
def handleInterrupt(num, frame):
    sys.exit(0)

# a simple thread that gets a config for a filename, initializes a tailer,
# and loops.
class TailerThread(threading.Thread):
    def __init__(self, initial_lines, filename, follow, config):
        threading.Thread.__init__(self)
        self.setDaemon(1)
        self.initial_lines = initial_lines
        self.filename = filename
        self.follow = follow
        self.config = config
    
    def run(self):
        global active
        try:
            self.do_run()
        except Exception, e:
            pass
        lock.acquire()
        active = active - 1
        if active == 0:
            event.set()
        lock.release()

    def do_run(self):
        global last_filename
        if self.filename != None:
            ansi, colors, filter = self.config.getconfig(self.filename[string\
                .rfind(self.filename, os.sep)+1:])
            tailer = TailFile(self.filename, self.follow)
            tailer.seek_lines(self.initial_lines)
        else:
            if not multiple and not silent:
                print >>sys.stderr, '*** reading stdin, will just follow...'
            self.filename = 'standard input'
            ansi, colors, filter = self.config.getstdinconfig()
            tailer = sys.stdin

        if tty_only and not sys.stdout.isatty():
            docolor = lambda ansi, colors, line: line
        else:
            docolor = colorize

        while 1:
            line = tailer.readline()
            if not line:
                break
            if line[len(line)-1] == '\n':
                line = line[:len(line)-1]
            line = filter(line)
            if line is None:
                continue
            lock.acquire()
            try:
                if (multiple or verbose) and (not silent) \
                        and last_filename != self.filename:
                    last_filename = self.filename
                    print
                    print docolor(ansi, colors, '==> %s <==' % self.filename)
                print docolor(ansi, colors, line)
            except Exception:
                print ansi['reset']
                sys.exit(1)
            sys.stdout.flush()
            lock.release()

# processes the command line arguments.
def processargs():
    global verbose
    global silent
    global config_file
    global tty_only
    filenames = []
    lines = None
    follow = 0
    try:
        opts, pargs = getopt.getopt(sys.argv[1:], 'fn:?hvq', ["follow",
            "lines=", "help", "verbose", "quiet", "silent", "config=", "tty"])
    except getopt.error:
        print >>sys.stderr, 'unrecognized option!'
        print >>sys.stderr
        usage()
        sys.exit(1)
    for opt in opts:
        if opt[0] in ['-n', '--lines']:
            lines = opt[1]
        elif opt[0] in ['-f', '--follow']:
            follow = 1
        elif opt[0] in ['-?', '-h', '--help']:
            usage()
            sys.exit(1)
        elif opt[0] in ['-v', '--verbose']:
            verbose = 1
        elif opt[0] in ['-q', '--quiet', '--silent']:
            silent = 1
        elif opt[0] in ['--tty']:
            if hasattr(sys.stdout, 'isatty'):
                tty_only = 1
            else:
                print >>sys.stderr, \
                    'this platform does not provide tty detection. '\
                    + 'ignoring --tty...'
                print >>sys.stderr
                tty_only = 0
        elif opt[0] in ['--config']:
            config_file = opt[1]
    if lines is None:
        lines = 10
    for filename in pargs:
        if filename == '-':
            filenames.append(None)
        else:
            filenames.append(filename)
    if len(filenames) == 0:
        filenames.append(None)
    return (int(lines), filenames, follow)

# prints a usage message.
def usage():
    global version_number
    print >>sys.stderr, '''
mtail %s by matt hellige (matt@immute.net)

usage: %s [option]... [<filename>]...
  -?, -h, --help             print this usage info and exit
      -f, --follow           output appended data as the file grows
      -n, --lines=N          output the last N lines, instead of the last 10
      -v, --verbose          always output headers giving file names
      -q, --quiet, --silent  never output headers giving file names
      --config=FILE          use config file FILE instead of ~/.mtailrc
      --tty                  only perform coloring when standard output is
                             connected to a terminal (tty)

with more than one filename, mtail will precede each chunk from
each with a header giving the file name. if no filenames are given
or a filename is -, standard input is used, -f is automatically
set, and -n is ignored.

this version does not support arguments of the form -N as synonyms
for -nN, nor does it support -n +N (or --lines +N). -f always
follows a particular file descriptor rather than a file name, i.e.
this version does not support the --follow=name behavior of gnu
tail.

''' % (version_number, sys.argv[0])

# colorizes a line, returning a string suitable for printing to a 
# terminal.
def colorize(ansi, colors, line):
    if line == "":
        return line
    colarray = len(line)*[None]
    # match each regexp in turn, and paint in the color array in the right 
    # place(s)...
    for colpair in colors:
        pos = 0
        m = colpair[0].search(line, pos)
        while m is not None:
            if len(m.groups()) > 0:
                colarray[m.start(1):m.end(1)] = len(m.group(1))*[colpair[1]]
            else:
                colarray[m.start():m.end()] = len(m.group())*[colpair[1]]
            pos = m.end()
            m = colpair[0].search(line, pos)

    colline = ""
    curcolor = None
    i = 0
    # now draw the line with colors...
    while i < len(line):
        if colarray[i] != curcolor:
            if curcolor is not None:
                colline = colline+ansi["reset"]
            curcolor = colarray[i]
            if curcolor is not None:
                colline = colline+ansi[curcolor]
        colline = colline+line[i]
        i = i + 1
    if curcolor is not None:
        colline = colline+ansi["reset"]
    return colline

# this class provides a readline() method which reads a complete line,
# even if it has to block and poll the file for awhile to do so.
# it also provides a seek_file(n) method which places the file pointer
# n lines from the end of the file.
#
# i'm not going to document it any further... it's pretty nasty, but 
# straightforward.
class TailFile:
    position = 0
    filename = None
    file = None
    follow = 0
    readbuf = ""

    def __init__(self, filename, follow = 0):
        self.filename = filename
        if not os.path.exists(filename):
            print >>sys.stderr, "no such file: '"+filename+"'."
            sys.exit(1)
        if os.path.isdir(filename):
            print >>sys.stderr, "file '"+filename+"' is a directory."
            sys.exit(1)
        if not os.access(filename, os.R_OK):
            print >>sys.stderr, "cannot read file '" + filename \
                + "'. permission denied."
            sys.exit(1)
        self.file = open(self.filename, 'r')
        self.follow = follow

    def readline(self):
        index = string.find(self.readbuf, '\n')
        while index == -1:
            try:
                n = self.more_to_read()
            except Exception:
                return None
            if n == 0:
                if self.follow:
                    time.sleep(1)
                else:
                    return None
            else:
                # TODO: comment this...
                self.readbuf = self.readbuf + self.file.read(int(n))
                index = string.find(self.readbuf, '\n')
        line = self.readbuf[:index+1]
        self.readbuf = self.readbuf[index+1:]
        return line

    def seek_lines(self, lines):
        bufsize = 2048
        bytestoread = 2048
        self.file.seek(0, 2)
        if lines == 0:
            return
        pos = self.file.tell()
        while pos != 0:
            pos = pos - bufsize
            if pos < 0:
                # jython gets confused about int/long between file.tell() and
                # file.read(). truncating this to an in here should always 
                # be safe, since our initial sizes are only 2048, and pos
                # can only end up negative if the result of tell() is less
                # than bufsize...
                bytestoread = bytestoread + int(pos)
                pos = 0
            self.file.seek(pos)
            buf = self.file.read(bytestoread)
            j = bytestoread-1
            while j >= 0:
                if buf[j] == '\n':
                    lines = lines - 1
                    if lines < 0:
                        self.file.seek(pos+j+1)
                        return
                j = j - 1
        self.file.seek(0)

    def end_of_file_position(self):
        return os.stat(self.filename)[stat.ST_SIZE]

    def more_to_read(self):
        end = self.end_of_file_position()
        if end < self.file.tell():
            self.file.seek(end)
            return 0
        return end - self.file.tell()

# this class provides an abstraction of the mtail config file. it knows
# how to read and parse a config file (via loadconfig()), and return the 
# appropriate configuration to use for a given filename (via getconfig())
# and for stdin (via getstdinconfig()).
#
# long-time fans may recognize that this code has been greatly improved, but 
# it's still pretty awful...
class ConfigFile:
    # filename of our config file
    filename = None
    # configs with file regexps
    configs = []
    # config for stdin
    stdinconfig = None
    # default default config (since default can be overridden in the config,
    # and we may need to recover our true default state...)
    defaultdefault = {
        'colors': [],
        'filters': []
    }
    # default config
    default = defaultdefault.copy()
    # these are the default ansi escape sequences we use... 
    defaultansi = {}
    defaultansi["black"]         = "\033[0;30m"
    defaultansi["red"]           = "\033[0;31m"                
    defaultansi["green"]         = "\033[0;32m"
    defaultansi["yellow"]        = "\033[0;33m"
    defaultansi["blue"]          = "\033[0;34m"
    defaultansi["magenta"]       = "\033[0;35m"
    defaultansi["cyan"]          = "\033[0;36m"
    defaultansi["white"]         = "\033[0;37m"
    defaultansi["brightblack"]   = "\033[1;30m"
    defaultansi["brightred"]     = "\033[1;31m"
    defaultansi["brightgreen"]   = "\033[1;32m"
    defaultansi["brightyellow"]  = "\033[1;33m"
    defaultansi["brightblue"]    = "\033[1;34m"
    defaultansi["brightmagenta"] = "\033[1;35m"
    defaultansi["brightcyan"]    = "\033[1;36m"
    defaultansi["brightwhite"]   = "\033[1;37m"
    defaultansi["reset"]         = "\033[0m"
    # and make them the default...
    ansi = defaultansi.copy()

    # a filter class implementating regexp-based substitution. the filter
    # method replaces occurrences of regex with the substitution text, which
    # may use \1, etc., to refer to groups matched by the regexp.
    class SubstitutionFilter:
        def __init__(self, regex, subst):
            self.regex = regex
            self.subst = subst

        def filter(self, line):
            return (line[0], re.sub(regex, subst, line[1]))
            
    # a filter class implementing per-line allow/deny. a line matching regex
    # will be either allowed or denied based on the setting of allow (a true 
    # value allows the line, a false value denies it).
    class AllowDenyFilter:
        def __init__(self, regex, allow):
            self.allow = allow
            self.regex = regex

        def filter(self, line):
            if (line[0] != self.allow and self.regex.search(line[1])):
                return (self.allow, line[1])
            return line

    # create a new ConfigFile representation with the given filename.
    def __init__(self, filename):
        self.filename = filename
    
    # load all configs from the file, parse and store internally.
    def loadconfig(self):
        if self.filename is None or not (os.path.exists(self.filename) 
                and os.path.isfile(self.filename)
                and os.access(self.filename, os.R_OK)):
            self.stdinconfig = self.default
            self.configs = []
            self.ansi = self.defaultansi.copy()
            return

        # we'll use ConfigException to signal config errors while parsing.
        # it won't be used outside of this method...
        class ConfigException(Exception):
            pass

        # checks whether a character is a valid regexp marker. if so,
        # the character is returned. if not, a ConfigException is raised.
        def check_re_marker(sep):
            if (string.find(string.digits, sep) != -1 or 
                    string.find(string.letters, sep) != -1):
                raise ConfigException("invalid regexp marker")
            return sep

        # parses and returns a regexp from the given string. the regexp
        # must be delimited by a non-alphanumeric character. raises
        # ConfigException if anything goes wrong...
        def parse_re(line):
            sep = check_re_marker(line[0])
            reend = string.index(line, sep, 1)
            if reend == -1:
                raise ConfigException("missing regexp end marker")
            rexp = line[1:reend]
            rexp = string.replace(rexp, '\\'+sep, sep)
            return rexp, reend

        # parses a filter specification (allow, deny, or replace) from the
        # given string. returns a filter object or raises ConfigException.
        def parse_filter(line):
            # a line like "deny /foo/" becomes a deny filter...
            if string.find(line, 'deny') == 0:
                line = string.strip(line[4:])
                (rexp, _) = parse_re(line)
                return self.AllowDenyFilter(re.compile(rexp), 0)
            # a line like "allow /foo/" becomes an allow filter...
            elif string.find(line, 'allow') == 0:
                line = string.strip(line[5:])
                (rexp, _) = parse_re(line)
                return self.AllowDenyFilter(re.compile(rexp), 1)
            # and a line like "/regex/subst/" becomes a substitution filter...
            else:
                sep = check_re_marker(line[0])
                subend = string.index(line, sep, 1)
                if subend == -1:
                    raise ConfigException("missing second filter marker")
                sub = line[1:subend]
                sub = string.replace(sub, '\\'+sep, sep)
                replend = string.index(line, sep, subend+1)
                if subend == -1:
                    raise ConfigException("missing final filter marker")
                repl = line[subend+1:replend]
                repl = string.replace(repl, '\\'+sep, sep)
                return self.SubstitutionFilter(re.compile(sub), repl)

        # parses a coloring specification from the given string.
        # returns a pair (color name, output sequence) or raises
        # ConfigException.
        def parse_ansi(line):
            sep = check_re_marker(line[0])
            nameend = string.index(line, sep, 1)
            if nameend == -1:
                raise ConfigException("missing second ansi marker")
            name = line[1:nameend]
            name = string.replace(name, '\\'+sep, sep)
            seqend = string.index(line, sep, nameend+1)
            if seqend == -1:
                raise ConfigException("missing final ansi marker")
            seq = line[nameend+1:seqend]
            seq = string.replace(seq, '\\'+sep, sep)
            return (name, seq)

        config = None
        mode = None
        stdin = 0
        default = 0
        nonstdin = 0
        lineno = 0
        file = open(self.filename, "r")
        try:
            for line in file.readlines():
                lineno = lineno+1
                line = string.strip(line)
                if len(line) > 0 and line[0] != '#':
                    if string.find(line, "files:") == 0:
                        if config is not None:
                            if nonstdin:
                                self.configs.append(config)
                            if stdin and self.stdinconfig is None:
                                self.stdinconfig = config
                            if default:
                                self.default = config
                        stdin = 0
                        nonstdin = 0
                        default = 0
                        filesre = None
                        files = string.strip(line[6:])
                        while len(files) > 0:
                            if string.find(files, 'stdin') == 0:
                                stdin = 1
                                files = string.lstrip(files[5:])
                            elif string.find(files, 'default') == 0:
                                default = 1
                                files = string.lstrip(files[7:])
                            else:
                                (rexp, reend) = parse_re(files)
                                if filesre is None:
                                    filesre = '('+rexp+')'
                                else:
                                    filesre = filesre+'|('+rexp+')'
                                files = string.lstrip(files[reend+1:])
                        config = {}
                        if filesre is not None:
                            nonstdin = 1
                            config['files'] = re.compile(filesre)
                        config['colors'] = []
                        config['filters'] = []
                        mode = None
                    elif string.find(line, 'ansi:') == 0:
                        if config is not None:
                            if nonstdin:
                                self.configs.append(config)
                            if stdin and self.stdinconfig is None:
                                self.stdinconfig = config
                            if default:
                                self.default = config
                        mode = 'ansi'
                        config = None
                    elif string.find(line, 'colors:') == 0:
                        if config is None:
                            raise ConfigException(\
                                "'colors:' found outside of 'files:' block")
                        mode = 'colors'
                    elif string.find(line, 'filters:') == 0:
                        if config is None:
                            raise ConfigException(\
                                "'filters:' found outside of 'files:' block")
                        mode = 'filters'
                    else:
                        if mode == 'colors':
                            (rexp, reend) = parse_re(line)
                            color = string.strip(line[reend+1:])
                            if len(color)==0:
                                raise ConfigException("missing color")
                            config['colors'].append((re.compile(rexp), color))
                        elif mode == 'filters':
                            config['filters'].append(parse_filter(line))
                        elif mode == 'ansi':
                            (name, seq) = parse_ansi(line)
                            self.ansi[name] = seq
                        else:
                            raise ConfigException(\
                                "this line doesn't belong here!")
            if config is not None:
                if nonstdin:
                    self.configs.append(config)
                if stdin and self.stdinconfig is None:
                    self.stdinconfig = config
                if default:
                    self.default = config
            if self.stdinconfig is None:
                self.stdinconfig = self.default
            self.checkconfigs()
        except ConfigException, e:
            print >>sys.stderr, "configuration error! " + str(e) \
                + " at line " + str(lineno) + "."
            print >>sys.stderr, "using no config!"
            self.default = self.defaultdefault.copy()
            self.configs = []
            self.stdinconfig = self.default
            self.ansi = self.defaultansi.copy()
            return

    # check the configs and remove unrecognized colors. since ansi blocks
    # can appear anywhere, we need to do this after we've finished parsing.
    def checkconfigs(self):
        for config in self.configs + [self.stdinconfig, self.default]:
            for color in config['colors']:
                if not self.ansi.has_key(color[1]):
                    config['colors'].remove(color)

    # returns a function to filter input lines by applying the specified
    # filters, in order.
    def __makefilter(self, filters):
        def filter_line(line):
            line = (1, line)
            for filter in filters:
                line = filter.filter(line)
            if line[0]:
                return line[1]
        return filter_line

    # get the config to use when coloring stdin
    def getstdinconfig(self):
        return (self.ansi, self.stdinconfig['colors'], \
            self.__makefilter(self.stdinconfig['filters']))

    # get the config to use when coloring the file filename. filename should
    # not be a full pathname.
    def getconfig(self, filename):
        colors = self.default['colors']
        filters = self.default['filters']
        for config in self.configs:
            if config['files'].match(filename):
                colors = config['colors']
                filters = config['filters']
                break
        return (self.ansi, colors, self.__makefilter(filters))

# jython doesn't provide os.access, so we'll define it here.
if not hasattr(os, 'access'):
    try:
        # if we're not in jython, this will fail and we're just out of
        # luck. but i think everybody else provides os.access(), so that's
        # probably fine...
        from java.io import File

        os.F_OK = 1
        os.R_OK = 2
        os.W_OK = 4
     
        # this code came from the jython-users list in 2002, courtesy of
        # graham klyne.
        def os_access(path, mode):
            f = File(path)
            if mode & os.F_OK:
                if not f.exists(): return None
            if mode & os.R_OK:
                if not f.canRead(): return None
            if mode & os.W_OK:
                if not f.canWrite(): return None
            return 1

        os.access = os_access
    except:
        # we're just out of luck, i guess...
        pass

# now we'll call main()...
if __name__ == '__main__':
    main()
